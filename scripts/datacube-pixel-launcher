#!/usr/bin/env python

from __future__ import print_function

import os
import subprocess
import click
from pathlib import Path


ROOT_DIR = Path(__file__).absolute().parent.parent
CONFIG_DIR = ROOT_DIR/'config'
SCRIPT_DIR = ROOT_DIR/'scripts'

@click.group()
def cli():
  pass


@cli.command()
@click.option('--queue', '-q', default='normal',
              type=click.Choice(['normal', 'express']))
@click.option('--project', '-P', default='u46')
@click.option('--nodes', '-n', required=True,
              help='Number of nodes to request',
              type=click.IntRange(1, 100))
@click.option('--walltime', '-t', default=1,
              help='Number of hours to request',
              type=click.IntRange(1, 10))
@click.option('--name', '-N', default='latest_pixel', help='Job name to use')
@click.option('--config', help='Datacube config file',
              type=click.Path(exists=True, dir_okay=False))
@click.option('--env', help='Node environment setup script',
              type=click.Path(exists=True, dir_okay=False))
# @click.argument('app_config')
# @click.argument('year', type=click.IntRange(1960, 2060))
def qsub(queue, project, nodes, walltime, name, config=None, env=None):
    # app_config = CONFIG_DIR/app_config
    # taskfile = Path(app_config.stem + '_' + str(year) + '.bin').absolute()
    # FILE_PATH = '/home/547/bxb547/ga-repository/agdcV2/datacube/api/workflow/pixel_rollover.py'
    app_cmd = 'datacube-pixel --executor distributed DSCHEDULER'
    env_arg = '--env "%(env)s"' % dict(env=env) if env else ''

    distr_cmd = '"%(distr)s" %(env_arg)s --ppn 16 %(app_cmd)s' % dict(
        distr=SCRIPT_DIR/'distributed.sh',
        env_arg=env_arg,
        app_cmd=app_cmd,
        )

    l_args = 'ncpus=%(ncpus)d,mem=%(mem)dgb,walltime=%(walltime)d:00:00' % dict(
        ncpus=nodes*16,
        mem=nodes*31,
        walltime=walltime,
    )

    qsub = 'qsub -q %(queue)s -N %(name)s -P %(project)s -l %(l_args)s -- /bin/bash %(distr_cmd)s'
    cmd = qsub % dict(queue=queue,
                      name=name,
                      project=project,
                      l_args=l_args,
                      distr_cmd=distr_cmd,
                     )

    if click.confirm('\n'+cmd+'\nRUN?', default=True):
        subprocess.check_call(cmd, shell=True)


if __name__ == '__main__':
    cli()
